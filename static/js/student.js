document.addEventListener('DOMContentLoaded', () => {
    const textarea = document.querySelector('.request');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    textarea.addEventListener('input', () => {
        autoResizeTextarea(textarea);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    autoResizeTextarea(textarea);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        autoResizeTextarea(textarea);
    });

    const fileInput = document.getElementById('fileInput');
    const filePreview = document.getElementById('filePreview');
    const attachBtn = document.querySelector('.attach-btn');

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    let selectedFiles = [];
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    function autoResizeTextarea() {
        textarea.style.height = 'auto';
        const newHeight = Math.min(textarea.scrollHeight, 150);
        textarea.style.height = `${newHeight}px`;
        textarea.style.overflowY = textarea.scrollHeight > 150 ? 'auto' : 'hidden';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è textarea
    autoResizeTextarea();
    textarea.addEventListener('input', autoResizeTextarea);
    window.addEventListener('resize', autoResizeTextarea);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    attachBtn.addEventListener('click', function() {
        fileInput.value = '';
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    fileInput.addEventListener('change', function(e) {
        if (this.files.length > 0) {
            selectedFiles = [...selectedFiles, ...Array.from(this.files)];
            updateFilePreview();
        }
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
    function updateFilePreview() {
        filePreview.innerHTML = '';
        
        if (selectedFiles.length === 0) {
            filePreview.style.display = 'none';
            return;
        }
        
        filePreview.style.display = 'block';
        
        selectedFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-preview-item';
            
            // –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            const fileIcon = document.createElement('span');
            fileIcon.className = 'file-icon';
            fileIcon.textContent = getFileIcon(file.type);
            fileItem.appendChild(fileIcon);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileName = document.createElement('span');
            fileName.className = 'file-name';
            fileName.textContent = file.name.length > 20 
                ? file.name.substring(0, 17) + '...' 
                : file.name;
            fileName.title = file.name;
            fileItem.appendChild(fileName);
            
            // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            const fileSize = document.createElement('span');
            fileSize.className = 'file-size';
            fileSize.textContent = formatFileSize(file.size);
            fileItem.appendChild(fileSize);
            
            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = document.createElement('span');
            removeBtn.className = 'remove-file';
            removeBtn.innerHTML = '&times;';
            removeBtn.onclick = (e) => {
                e.stopPropagation();
                removeFile(index);
            };
            fileItem.appendChild(removeBtn);
            
            filePreview.appendChild(fileItem);
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    function removeFile(index) {
        selectedFiles.splice(index, 1);
        updateFilePreview();
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getFileIcon(fileType) {
        if (fileType.includes('image')) return 'üñºÔ∏è';
        if (fileType.includes('pdf')) return 'üìÑ';
        if (fileType.includes('word')) return 'üìù';
        return 'üìÅ';
    }
    
    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' B';
        if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        return (bytes / 1048576).toFixed(1) + ' MB';
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞—à–∞ –≤–µ—Ä—Å–∏—è)
    window.submitForm = async function() {
        const input = document.getElementById('userInput');
        const loading = document.getElementById('loading');
        const responseDiv = document.querySelector('.response');
        
        if (!input.value.trim() && selectedFiles.length === 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }

        loading.style.display = 'flex';
        responseDiv.innerHTML = '';

        try {
            const formData = new FormData();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            if (input.value.trim()) {
                formData.append('request', input.value);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            selectedFiles.forEach(file => {
                formData.append('files', file);
            });

            const response = await fetch('/student', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');

            const data = await response.json();
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∞
            responseDiv.innerHTML = '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
            const hintButton = `
                <div class="hint">
                    <button type="button" class="hint-btn">
                        <img class="hint-img" src="static/img/hint.png" alt="hint">
                    </button>
                </div>
            `;
            responseDiv.insertAdjacentHTML('afterbegin', hintButton);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const content = document.createElement('div');
            content.innerHTML = data.html;
            responseDiv.appendChild(content);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MathJax
            MathJax.typeset();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            let currentHintIndex = 0;
            document.querySelector('.hint-btn').addEventListener('click', () => {
                const hintsContainer = document.getElementById('hints-container');
                const hints = hintsContainer ? hintsContainer.textContent.split('\n') : [];

                if (hints.length > 0 && currentHintIndex < hints.length) {
                    let hintDisplay = document.getElementById('hint-display');
                    if (!hintDisplay) {
                        hintDisplay = document.createElement('div');
                        hintDisplay.id = 'hint-display';
                        hintDisplay.style.marginTop = '10px';
                        hintDisplay.style.color = '#666';
                        hintsContainer.parentNode.insertBefore(hintDisplay, hintsContainer.nextSibling);
                    }

                    hintDisplay.innerHTML = `–ü–æ–¥—Å–∫–∞–∑–∫–∞ ${currentHintIndex + 1}: ${hints[currentHintIndex]}`;
                    currentHintIndex++;
                    
                    MathJax.typesetPromise([hintDisplay]).then(() => {
                        console.log('MathJax –æ–±—Ä–∞–±–æ—Ç–∞–ª –ø–æ–¥—Å–∫–∞–∑–∫—É');
                    }).catch(console.error);
                } 
                if (currentHintIndex >= hints.length) {
                    currentHintIndex = 0;
                }
            });

        } catch (error) {
            responseDiv.innerHTML = '–û—à–∏–±–∫–∞: ' + error.message;
        } finally {
            loading.style.display = 'none';
            input.value = '';
            selectedFiles = [];
            updateFilePreview();
        }
    };
});