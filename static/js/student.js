
document.addEventListener('DOMContentLoaded', () => {
    const textarea = document.querySelector('.request');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    textarea.addEventListener('input', () => {
        autoResizeTextarea(textarea);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    autoResizeTextarea(textarea);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        autoResizeTextarea(textarea);
    });

    const fileInput = document.getElementById('fileInput');
    const filePreview = document.getElementById('filePreview');
    const attachBtn = document.querySelector('.attach-btn');

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    let selectedFiles = [];
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    function autoResizeTextarea() {
        textarea.style.height = 'auto';
        const newHeight = Math.min(textarea.scrollHeight, 150);
        textarea.style.height = `${newHeight}px`;
        textarea.style.overflowY = textarea.scrollHeight > 150 ? 'auto' : 'hidden';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è textarea
    autoResizeTextarea();
    textarea.addEventListener('input', autoResizeTextarea);
    window.addEventListener('resize', autoResizeTextarea);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    attachBtn.addEventListener('click', function() {
        fileInput.value = '';
    });
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤
    function updateFilePreview() {
        filePreview.innerHTML = '';
        
        if (selectedFiles.length === 0) {
            filePreview.style.display = 'none';
            return;
        }
        
        filePreview.style.display = 'block';
        
        selectedFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-preview-item';
            
            // –ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            const fileIcon = document.createElement('span');
            fileIcon.className = 'file-icon';
            fileIcon.textContent = getFileIcon(file.type);
            fileItem.appendChild(fileIcon);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileName = document.createElement('span');
            fileName.className = 'file-name';
            fileName.textContent = file.name.length > 20 
                ? file.name.substring(0, 17) + '...' 
                : file.name;
            fileName.title = file.name;
            fileItem.appendChild(fileName);
            
            // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            const fileSize = document.createElement('span');
            fileSize.className = 'file-size';
            fileSize.textContent = formatFileSize(file.size);
            fileItem.appendChild(fileSize);
            
            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = document.createElement('span');
            removeBtn.className = 'remove-file';
            removeBtn.innerHTML = '&times;';
            removeBtn.onclick = (e) => {
                e.stopPropagation();
                removeFile(index);
            };
            fileItem.appendChild(removeBtn);
            
            filePreview.appendChild(fileItem);
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    function removeFile(index) {
        selectedFiles.splice(index, 1);
        updateFilePreview();
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getFileIcon(fileType) {
        if (fileType.includes('image')) return 'üñºÔ∏è';
        if (fileType.includes('pdf')) return 'üìÑ';
        if (fileType.includes('word')) return 'üìù';
        return 'üìÅ';
    }
    
    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' B';
        if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        return (bytes / 1048576).toFixed(1) + ' MB';
    }
    
    const MAX_FILES = 10;

    // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    fileInput.addEventListener('change', function(e) {
        if (this.files.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            if (selectedFiles.length + this.files.length > MAX_FILES) {
                alert(`–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ ${MAX_FILES} —Ñ–∞–π–ª–æ–≤`);
                this.value = '';
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            selectedFiles = [...selectedFiles, ...Array.from(this.files)];
            updateFilePreview();
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è processSelectedFiles
    async function processSelectedFiles(files) {
        const results = [];
        
        for (const file of files) {
            try {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (5MB –º–∞–∫—Å–∏–º—É–º)
                if (file.size > 5 * 1024 * 1024) {
                    alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5MB)`);
                    continue;
                }

                if (file.type.startsWith('image/')) {
                    // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                    const compressedFile = await compressImage(file);
                    const base64 = await readFileAsBase64(compressedFile);
                    results.push({
                        type: 'image',
                        name: file.name,
                        data: base64,
                        mimeType: 'image/jpeg' // –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
                    });
                } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
                    const text = await readFileAsText(file);
                    results.push({
                        type: 'text',
                        name: file.name,
                        data: text
                    });
                } else {
                    const base64 = await readFileAsBase64(file);
                    results.push({
                        type: 'binary',
                        name: file.name,
                        data: base64,
                        mimeType: file.type
                    });
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
            }
        }
        
        return results;
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async function compressImage(file, quality = 0.7) {
        return new Promise((resolve) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = new Image();
                img.src = e.target.result;
                
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    
                    canvas.toBlob((blob) => {
                        resolve(new File([blob], file.name, {
                            type: 'image/jpeg',
                            lastModified: Date.now()
                        }));
                    }, 'image/jpeg', quality);
                };
            };
            reader.readAsDataURL(file);
        });
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    function readFileAsBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result.split(',')[1]); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:...
            reader.onerror = reject;
            reader.readAsDataURL(file);
        });
    }

    document.querySelector('.account')?.addEventListener('click', function() {
        window.location.href = '/account';
    });
    
    function readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsText(file);
        });
    }
<<<<<<< HEAD

    function displayFiles(filesData) {
        const filesContainer = document.querySelector('.files-container');
        filesContainer.innerHTML = '';
        
        if (!filesData || filesData.length === 0) return;
        
        document.getElementById('taskFiles').style.display = 'block';
        
        filesData.forEach(file => {
            const fileElement = document.createElement('div');
            fileElement.className = 'file-item';
            
            if (file.type === 'image') {
                fileElement.innerHTML = `
                    <img src="data:${file.mimeType};base64,${file.data}" 
                         alt="${file.name}" 
                         style="max-width: 300px; max-height: 200px; cursor: pointer;"
                         onclick="openFilePreview('data:${file.mimeType};base64,${file.data}')">
                    <p>${file.name}</p>
                `;
            } else {
                fileElement.innerHTML = `
                    <a href="data:${file.mimeType};base64,${file.data}" 
                       download="${file.name}" 
                       class="file-link">
                        üìÑ ${file.name}
                    </a>
                `;
            }
            
            filesContainer.appendChild(fileElement);
        });
    }
=======
>>>>>>> 7812bf7a0b778ef27a4c6eb037b995c7cd0e3bc7
    
    let currentTask = null;  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ

    window.submitForm = async function() {
        const input = document.getElementById('userInput');
        const loading = document.getElementById('loading');
        const responseDiv = document.querySelector('.response');
        
        if (!input.value.trim() && selectedFiles.length === 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª');
            return;
        }
    
        loading.style.display = 'flex';
        responseDiv.innerHTML = '';

        // –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        function initHintButton(hints) {
            const hintBtn = document.querySelector('.hint-btn');
            if (!hintBtn) return;

            let currentHintIndex = 0;
            
            hintBtn.addEventListener('click', () => {
                if (!hints || hints.length === 0) {
                    showNotification('–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'warning');
                    return;
                }

                let hintDisplay = document.getElementById('hint-display');
                if (!hintDisplay) {
                    hintDisplay = document.createElement('div');
                    hintDisplay.id = 'hint-display';
                    hintDisplay.style.marginTop = '10px';
                    hintDisplay.style.color = '#666';
                    document.querySelector('.response').appendChild(hintDisplay);
                }
                
                hintDisplay.innerHTML = `–ü–æ–¥—Å–∫–∞–∑–∫–∞ ${currentHintIndex + 1}: ${hints[currentHintIndex]}`;
                currentHintIndex = (currentHintIndex + 1) % hints.length;
                
                if (typeof MathJax !== 'undefined') {
                    MathJax.typesetPromise([hintDisplay]);
                }
            });
        }
    
        try {
            const processedFiles = await processSelectedFiles(selectedFiles);
            const response = await fetch('/student', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    request: input.value.trim(),
                    files: processedFiles
                })
            });
            
            const data = await response.json();
            
            if (data.type === "verification" && data.task_files) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                displayFiles(data.task_files);
            }

            console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            responseDiv.innerHTML = '';
            
            if (data.type === "task") {
                currentTask = data;
                responseDiv.innerHTML = data.html;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
                responseDiv.insertAdjacentHTML('afterbegin', `
                    <div class="hint">
                        <button type="button" class="hint-btn">
                            <img class="hint-img" src="/static/img/hint.png" alt="hint">
                        </button>
                    </div>
                `);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
                initHintButton(data.hints);
                input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ...";
            } else if (data.type === "verification") {
                responseDiv.innerHTML = `
                    <div class="verification-result">
                        <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</h4>
                        <div>${data.html}</div>
                        ${data.is_correct ? 
                            '<div class="correct">‚úì –†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ!</div>' : 
                            '<div class="incorrect">‚úó –ï—Å—Ç—å –æ—à–∏–±–∫–∏</div>'}
                    </div>
                `;
<<<<<<< HEAD
                responseDiv.innerHTML = data.task_html;
=======
                responseDiv.innerHTML += data.html;
>>>>>>> 7812bf7a0b778ef27a4c6eb037b995c7cd0e3bc7
                
                if (data.is_correct) {
                    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                    fetch('/clear_task', { method: 'POST' })
                        .then(() => {
                            input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏...";
                            document.querySelector('.response').innerHTML = 
                                '<div class="placeholder-text">–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞...</div>';
                        });
                }

                responseDiv.insertAdjacentHTML('afterbegin', `
                    <div class="hint">
                        <button type="button" class="hint-btn">
                            <img class="hint-img" src="/static/img/hint.png" alt="hint">
                        </button>
                    </div>
                `);
                
                // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
                const hintBtn = document.querySelector('.hint-btn');
                if (hintBtn) {
                    let currentHintIndex = 0;
                    hintBtn.addEventListener('click', () => {
                        if (data.hints && data.hints.length > 0) {
                            let hintDisplay = document.getElementById('hint-display');
                            if (!hintDisplay) {
                                hintDisplay = document.createElement('div');
                                hintDisplay.id = 'hint-display';
                                hintDisplay.style.marginTop = '10px';
                                hintDisplay.style.color = '#666';
                                responseDiv.appendChild(hintDisplay);
                            }
                            
                            hintDisplay.innerHTML = `–ü–æ–¥—Å–∫–∞–∑–∫–∞ ${currentHintIndex + 1}: ${data.hints[currentHintIndex]}`;
                            currentHintIndex = (currentHintIndex + 1) % data.hints.length;
                            
                            if (typeof MathJax !== 'undefined') {
                                MathJax.typesetPromise([hintDisplay]);
                            }
                        }
                    });
                }
            }

    
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            responseDiv.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
        } finally {
            loading.style.display = 'none';
            input.value = '';
            selectedFiles = [];
            updateFilePreview();
        }
    }});